// Generated by CoffeeScript 1.3.3
(function() {
  var $;

  $ = jQuery;

  $.fn.extend({
    juke: function(options) {
      var isJSON, log, settings;
      settings = {
        title: "Mixtape",
        imagesFolder: "public/images/juke/",
        soundmanagerFolder: "public/swf/",
        placeholder: "images/juke/default.jpg",
        trackinfo: "trackinfo.json",
        SM2: "public/docs/js/min/soundmanager2.min.js",
        itunes: true,
        audio: "mix.mp3",
        tooltips: false,
        animationSpeed: 400,
        debug: false
      };
      settings = $.extend({}, settings, options);
      log = function(msg) {
        if (settings.debug) {
          return typeof console !== "undefined" && console !== null ? console.log(msg) : void 0;
        }
      };
      isJSON = function(str) {
        if (!str.length) {
          return false;
        }
        str = str.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@');
        str = str.replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']');
        str = str.replace(/(?:^|:|,)(?:\s*\[)+/g, '');
        return /^[\],:{}\s]*$/.test(str);
      };
      $.ajaxSetup({
        xhr: function() {
          if (window.ActiveXObject) {
            return new ActiveXObject("Microsoft.XMLHTTP");
          } else {
            return new XMLHttpRequest();
          }
        }
      });
      return this.each(function() {
        var cur, currentTrack, elem, getMarker, setup, title, updateInfo;
        currentTrack = 1;
        cur = 0;
        title = document.title;
        elem = $(this);
        getMarker = function(index) {
          var marker, min, minutePattern, sec, secondPattern, testPattern;
          marker = trackInfo[index].marker;
          testPattern = /:/;
          minutePattern = /^\d*(?=:)/;
          secondPattern = /[0-5][0-9]$/;
          if (testPattern.test(marker)) {
            min = parseInt(minutePattern.exec(marker), 10);
            sec = parseInt(secondPattern.exec(marker), 10);
            return min * 60 + sec;
          } else {
            return parseInt(trackInfo[index].marker, 10);
          }
        };
        updateInfo = function(artist, track) {
          var newString;
          newString = artist + " - <em class='track'>" + track + "</em>";
          countryCode;

          queryString;

          link;

          if (settings.itunes) {
            return $.ajax({
              url: 'http://api.wipmania.com/jsonp?callback=?',
              dataType: 'jsonp',
              success: function(data) {
                var countryCode, queryString;
                countryCode = data.address.country_code;
                queryString = "http://itunes.apple.com/search?entity=song&country=" + countryCode + "&term=" + encodeURIComponent(artist + " " + track) + "&limit=5&callback=?";
                return $.getJSON(queryString, function(data) {
                  var link;
                  if (data.resultCount === 1) {
                    link = data.results[0].trackViewUrl;
                  } else if (data.resultCount > 1) {
                    $.each(data.results, function() {
                      if (this.trackName === track) {
                        return link = this.trackViewUrl;
                      }
                    });
                  }
                  if (link != null) {
                    newString += " (<a href='" + link + "' class='itunes-link'>iTunes</a>)";
                  }
                  return tooltip.html(newString);
                });
              }
            });
          } else {
            return tooltip.html(newString);
          }
        };
        $(window).resize(function() {
          var tapeOffset;
          shadowleft.css({
            right: shadowleft.parent().width() / 2 + 63
          });
          shadowright.css({
            left: shadowright.parent().width() / 2 + 64
          });
          tapeOffset = tapebox.parent().width() / 2 - 62;
          if (cur > 0) {
            tapeOffset -= currentTrack * 125;
          }
          return tapebox.css({
            left: tapeOffset
          });
        });
        setup = function() {
          var playtoggle, shadowleft, shadowright, tapebox, tooltip, trackInfo;
          elem.css({
            "display": "block",
            "visibility": "hidden"
          });
          if (isJSON(settings.trackinfo)) {
            trackInfo = $.parseJSON(settings.trackinfo);
          } else {
            $.ajax({
              url: settings.trackinfo,
              async: false,
              success: function(data) {
                var currentMarker, duration, nextMarker, numTracks;
                trackInfo = data;
                duration = parseInt(trackInfo.duration, 10);
                trackInfo = trackInfo.tracks;
                currentMarker = getMarker(currentTrack - 1);
                nextMarker = getMarker(currentTrack);
                return numTracks = parseInt(trackInfo.length, 10);
              }
            });
          }
          elem.children().wrapAll('<ul id="tapebox"/>');
          $("#tapebox").wrapAll('<div id="displaybox"/>');
          $("#tapebox").prepend('<li><img src="' + settings.placeholder + '" width="125"></li>');
          $("#displaybox").prepend('<img src="' + settings.imagesFolder + 'bg.png" alt="">');
          elem.prepend('<div id="shadowleft" class="shadow"></div><div id="shadowright" class="shadow"></div><div id="playhead"><img src="' + settings.imagesFolder + 'playhead_overlay.png"><div id="playtoggle" class="hover"></div></div>');
          elem.append('<div id="displaybox_overlay"><img src="' + settings.imagesFolder + 'displaybox_overlay.png" /></div>');
          if (settings.tooltips) {
            elem.append('<div class="tooltip">' + settings.title + '</div>');
            tooltip = $(".tooltip");
          }
          if (settings.debug) {
            elem.append('<span id="skipbackward">REV</span>&nbsp;-&nbsp;<span id="skipforward">FWD</span>');
          }
          shadowleft = $("#shadowleft");
          shadowright = $("#shadowright");
          tapebox = $("#tapebox");
          playtoggle = $("#playtoggle");
          return soundManager.onready(function() {
            soundManager.createSound({
              id: "juke",
              url: $.trim(settings.audio),
              onplay: function() {
                var tapeOffset;
                playtoggle.addClass('playing');
                document.title = "\u25B6 " + settings.title + " - " + title;
                if (cur === 0) {
                  tapeOffset = tapebox.parent().width() / 2 - 62 - 125;
                  tapebox.animate({
                    "left": tapeOffset
                  }, settings.animationSpeed, "swing");
                  if (settings.tooltips) {
                    return updateInfo(trackInfo[currentTrack - 1].artist, trackInfo[currentTrack - 1].track);
                  }
                }
              },
              onpause: function() {
                playtoggle.removeClass('playing');
                return document.title = title;
              },
              onfinish: function() {
                playtoggle.removeClass('playing');
                return document.title = title;
              },
              whileplaying: function() {
                var currentMarker, nextMarker;
                cur = parseInt(soundManager.getSoundById("juke").position / 1000, 10);
                if (cur >= duration) {
                  soundManager.pause("juke");
                }
                if (cur >= nextMarker) {
                  currentTrack += 1;
                  if (currentTrack < numTracks) {
                    currentMarker = nextMarker;
                    nextMarker = getMarker(currentTrack);
                  } else {
                    nextMarker = duration;
                  }
                  tapebox.animate({
                    "left": "-=125px"
                  }, settings.animationSpeed, "swing");
                  if (settings.tooltips) {
                    updateInfo(trackInfo[currentTrack - 1].artist, trackInfo[currentTrack - 1].track);
                  }
                }
                return log("total: " + duration + ", currently at: " + cur + ", next marker: " + nextMarker);
              }
            });
            $("#playtoggle").click(function() {
              return soundManager.togglePause("juke");
            });
            if (settings.debug) {
              $("#skipforward").click(function() {
                return soundManager.getSoundById("juke").setPosition(soundManager.getSoundById("juke").position + 5000);
              });
              $("#skipbackward").click(function() {
                return soundManager.getSoundById("juke").setPosition(soundManager.getSoundById("juke").position - 5000);
              });
            }
            shadowleft.css({
              right: shadowleft.parent().width() / 2 + 63
            });
            shadowright.css({
              left: shadowright.parent().width() / 2 + 64
            });
            tapebox.css({
              left: tapebox.parent().width() / 2 - 62
            });
            return elem.css("visibility", "visible");
          });
        };
        window.SM2_DEFER = true;
        return $.ajax({
          url: settings.SM2,
          success: function() {
            window.soundManager = new SoundManager();
            soundManager.url = settings.soundmanagerFolder + 'soundmanager2_flash_xdomain/';
            soundManager.useHTML5Audio = true;
            soundManager.autoLoad = true;
            soundManager.preferFlash = false;
            soundManager.consoleOnly = true;
            soundManager.debugMode = settings.debug;
            soundManager.wmode = 'transparent';
            soundManager.beginDelayedInit();
            return setup();
          }
        });
      });
    }
  });

}).call(this);
